# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

# if you're having troubles finding key codes for a key just type skhd --observe in a terminal and type a key. Pretty cool! Or just check the wiki.

# HYPER == SHIFT + CMD + ALT + OPTION

# Quickly restart the yabai launch agent
ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# open terminal
hyper - return : /Applications/kitty.app/Contents/MacOS/kitty

# focus window
# hyper - k : yabai -m window --focus north
# hyper - j : yabai -m window --focus south
# hyper - h : yabai -m window --focus west || \
#   begin yabai -m display --focus next  && yabai -m window --focus last; end || \
#   begin yabai -m display --focus first && yabai -m window --focus last; end
# hyper - l : yabai -m window --focus east ||
#   begin yabai -m display --focus prev && yabai -m window --focus first; end || \
#   begin yabai -m display --focus last && yabai -m window --focus first; end
hyper - 0x1E: yabai -m window --focus next || yabai -m window --focus first
hyper - 0x21: yabai -m window --focus prev || yabai -m window --focus last

# focus space
# hyper - k : osascript -e 'tell application "System Events" to key code 124 using control down'
# hyper - j : osascript -e 'tell application "System Events" to key code 123 using control down'

# focus screen
hyper - h : begin yabai -m display --focus next && yabai -m window --focus last; end || \
  begin yabai -m display --focus first && yabai -m window --focus last; end
hyper - l : begin yabai -m display --focus prev && yabai -m window --focus last; end || \
  begin yabai -m display --focus last && yabai -m window --focus last; end

# toggle window zoom
ctrl + alt - z : yabai -m window --toggle zoom-parent
ctrl + alt - f : yabai -m window --toggle zoom-fullscreen
# ctrl + alt - f : yabai -m window --toggle native-fullscreen

# move window forward
ctrl + alt - 0x1E : yabai -m window --swap next || yabai -m window --swap first
ctrl + alt - 0x21 : yabai -m window --swap prev || yabai -m window --swap last

# move window across screen
ctrl + alt - k : yabai -m window --warp north || yabai -m window --toggle split
ctrl + alt - j : yabai -m window --warp south || yabai -m window --toggle split
ctrl + alt - h : yabai -m window --warp west || yabai -m window --toggle split
ctrl + alt - l : yabai -m window --warp east || yabai -m window --toggle split

# rotate tree
ctrl + alt - 0x2F : yabai -m space --rotate 90
ctrl + alt - 0x2B : yabai -m space --rotate 270

# balance windows (=)
ctrl + alt - 0x18 : yabai -m space --balance

# change window size
ctrl + alt - w : yabai -m window --resize right:20:0 || yabai -m window --resize left:20:0
ctrl + alt - n : yabai -m window --resize right:-20:0 || yabai -m window --resize left:-20:0
ctrl + alt - t : yabai -m window --resize top:0:20 || yabai -m window --resize bottom:0:20
ctrl + alt - s : yabai -m window --resize top:0:-20 || yabai -m window --resize bottom:0:-20

# move window across display
ctrl + alt + cmd - h : begin yabai -m window --display next && yabai -m display --focus next; end || \
  begin yabai -m window --display first && yabai -m display --focus first; end
ctrl + alt + cmd - l : begin yabai -m window --display prev  &&  yabai -m display --focus prev; end || \
  begin yabai -m window --display last && yabai -m display --focus last; end

# move window to next space
ctrl + alt + cmd - k : yabai -m window --space next && osascript -e 'tell application "System Events" to key code 124 using control down'
ctrl + alt + cmd - j : yabai -m window --space prev && osascript -e 'tell application "System Events" to key code 123 using control down'

# move window to space and follow
ctrl + alt + cmd - 1 : yabai -m window --space 1 && osascript -e 'tell application "System Events" to key code 18 using control down'
ctrl + alt + cmd - 2 : yabai -m window --space 2 && osascript -e 'tell application "System Events" to key code 19 using control down'
ctrl + alt + cmd - 3 : yabai -m window --space 3 && osascript -e 'tell application "System Events" to key code 20 using control down'
ctrl + alt + cmd - 4 : yabai -m window --space 4 && osascript -e 'tell application "System Events" to key code 21 using control down'
ctrl + alt + cmd - 5 : yabai -m window --space 5 && osascript -e 'tell application "System Events" to key code 23 using control down'
ctrl + alt + cmd - 6 : yabai -m window --space 6 && osascript -e 'tell application "System Events" to key code 22 using control down'
ctrl + alt + cmd - 7 : yabai -m window --space 7 && osascript -e 'tell application "System Events" to key code 26 using control down'
ctrl + alt + cmd - 8 : yabai -m window --space 8 && osascript -e 'tell application "System Events" to key code 28 using control down'
ctrl + alt + cmd - 9 : yabai -m window --space 9 && osascript -e 'tell application "System Events" to key code 25 using control down'
ctrl + alt + cmd - 0 : yabai -m window --space 0 && osascript -e 'tell application "System Events" to key code 29 using control down'
